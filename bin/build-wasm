#!/bin/bash -e
function usage() {
   cat << 'EOF'
Usage: build-wasm [-hr] [-c debug|release] <example> [other build options...]
        -h show usage (this)
        -r run http-server
        -c set config
Build the wasm example and generate the index.html file.
EOF
}
dir=$(dirname $(dirname "$0"));
cd "$dir";
config="release";
run_server=0;
while getopts hc:r opt; do
  case $opt in
      r) run_server=1;;
      h) usage;
         exit 0;;
      c) config="$OPTARG";;
      *) echo "error: invalid option given." >&2; usage >&2; exit 2;;
  esac
done
shift $[ OPTIND - 1 ]


if [ $# -lt 1 ]; then
  usage >&2;
  exit 2;
fi

example="$1";
shift;
cargo build --example "$example" --target wasm32-unknown-unknown --$config "$@"
wasm-bindgen --out-dir "$example/wasm" --target web "target/wasm32-unknown-unknown/$config/examples/$example.wasm"
cat <<EOF > "$example/index.html"
<html>
  <head>
    <meta content="text/html;charset=utf-8" http-equiv="Content-Type"/>
  </head>
  <body>
  <!-- Note the usage of 'type=module' here as this is an ES6 module -->
  <script type="module">

    // Use ES module import syntax to import functionality from the module
    // that we have compiled.
    //
    // Note that the 'default' import is an initialization function which
    // will "boot" the module and make it ready to use. Currently browsers
    // don't support natively imported WebAssembly as an ES module, but
    // eventually the manual initialization won't be required!
    import { default as init } from './wasm/$example.js';
    async function run() {
      // First up we need to actually load the wasm file, so we use the
      // default export to inform it where the wasm file is located on the
      // server, and then we wait on the returned promise to wait for the
      // wasm to be loaded.
      //
      // Note that instead of a string here you can also pass in an instance
      // of 'WebAssembly.Module' which allows you to compile your own module.
      // Also note that the promise, when resolved, yields the wasm module's
      // exports which is the same as importing the '*_bg' module in other
      // modes
      await init('./wasm/${example}_bg.wasm');
      // And afterwards we can use all the functionality defined in wasm.
    }
    run();
  </script>
  </body>
</html>
EOF
if [ $run_server -eq 1 ]; then
  if ! command -v http-server &> /dev/null; then
    echo "warning: No http-server command found. Suggest running 'cargo install http-server'." >&2;
    exit 3;
  else
    http-server -vl "$example"
  fi
fi
